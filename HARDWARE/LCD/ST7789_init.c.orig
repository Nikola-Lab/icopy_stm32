#include "ST7789_init.h"
#include "delay.h"
#include "spi.h"

//定义是否用dma传输窗口指令
#define SetAddressWithDMA 

void ST7789_GPIO_Init(void)
{
    GPIO_InitTypeDef  GPIO_InitStructure;
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);	 //使能A端口时钟
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1|GPIO_Pin_2|GPIO_Pin_3;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 		 //推挽输出
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;//速度50MHz
    GPIO_Init(GPIOA, &GPIO_InitStructure);	  //初始化GPIOA
    GPIO_SetBits(GPIOA,GPIO_Pin_1|GPIO_Pin_2|GPIO_Pin_3);
}

void delay(int t)
{
    while(t--);
}
/******************************************************************************
      函数说明：LCD串行数据写入函数
      入口数据：dat  要写入的串行数据
      返回值：  无
******************************************************************************/
void ST7789_Writ_Bus(u8 dat)
{
    while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);//检查接收标志位
    SPI_I2S_SendData(SPI1,dat);
    delay(1);
}

/******************************************************************************
      函数说明：LCD写入数据
      入口数据：dat 写入的数据
      返回值：  无
******************************************************************************/
void ST7789_WR_DATA8(u8 dat)
{
    ST7789_Writ_Bus(dat);
}


/******************************************************************************
      函数说明：LCD写入数据
      入口数据：dat 写入的数据
      返回值：  无
******************************************************************************/
void ST7789_WR_DATA(u16 dat)
{
    ST7789_Writ_Bus(dat>>8);
    ST7789_Writ_Bus(dat);
}


/******************************************************************************
      函数说明：LCD写入命令
      入口数据：dat 写入的命令
      返回值：  无
******************************************************************************/
void ST7789_WR_REG(u8 dat)
{
    ST7789_DC_Clr();//写命令
    ST7789_Writ_Bus(dat);
    ST7789_DC_Set();//写数据
}


/******************************************************************************
      函数说明：设置起始和结束地址
      入口数据：x1,x2 设置列的起始和结束地址
                y1,y2 设置行的起始和结束地址
      返回值：  无
******************************************************************************/
void ST7789_Address_Set(u16 x1,u16 y1,u16 x2,u16 y2)
{
#ifdef SetAddressWithDMA
	u16 Datain[7];
	u32 num,num1;
	Datain[0] = 0x2a;//列地址设置
    Datain[1] = x1;
    Datain[2] = x2;
    Datain[3]=0x2b;//行地址设置
    Datain[4]=y1;
    Datain[5]=y2;
    Datain[6]=0x2c;//储存器写
	
	color1[0]=color;
	num=(xend-xsta)*(yend-ysta);
	if (num == 0)
		{
			return;
		}
	ST7789_Address_Set(xsta,ysta,xend,yend);//设置显示范围
	SPI_Cmd(SPI1, DISABLE);//关闭SPI
	SPI1->CR1|=1<<11;//设置SPI16位传输模式
	SPI_Cmd(SPI1, ENABLE);//使能SPI
	//就算是切换SPI寄存器消耗的时间，比起16位字长传输带来的速度提升来说也不值一提
	while(t)
	{
		if(num>65534)
		{
			num-=65534;
			num1=65534;
		}
		else
		{
			t=0;
			num1=num;
		}
		MYDMA_Config1(DMA1_Channel3,(u32)&SPI1->DR,(u32)color1,num1);
		SPI_I2S_DMACmd(SPI1,SPI_I2S_DMAReq_Tx,ENABLE);
		MYDMA_Enable(DMA1_Channel3);
		while(1)
		{
			if(DMA_GetFlagStatus(DMA1_FLAG_TC3)!=RESET)//等待通道3传输完成
			{
				DMA_ClearFlag(DMA1_FLAG_TC3);//清除通道3传输完成标志
				break;
			}
		}
  }
	SPI_Cmd(SPI1, DISABLE);//关闭SPI
	//SPI1->CR1=~SPI1->CR1;
	//SPI1->CR1|=1<<11;
	//SPI1->CR1=~SPI1->CR1;//设置SPI8位传输模式
	SPI1->CR1&=~(1<<11) ;//第11位置0设置SPI8位传输模式
	SPI_Cmd(SPI1, ENABLE);//使能SPI
	
	
	
	
#else
	if(USE_HORIZONTAL==0)
    {
        ST7789_WR_REG(0x2a);//列地址设置
        ST7789_WR_DATA(x1);
        ST7789_WR_DATA(x2);
        ST7789_WR_REG(0x2b);//行地址设置
        ST7789_WR_DATA(y1);
        ST7789_WR_DATA(y2);
        ST7789_WR_REG(0x2c);//储存器写
    }
    else if(USE_HORIZONTAL==1)
    {
        ST7789_WR_REG(0x2a);//列地址设置
        ST7789_WR_DATA(x1);
        ST7789_WR_DATA(x2);
        ST7789_WR_REG(0x2b);//行地址设置
        ST7789_WR_DATA(y1+80);
        ST7789_WR_DATA(y2+80);
        ST7789_WR_REG(0x2c);//储存器写
    }
    else if(USE_HORIZONTAL==2)
    {
        ST7789_WR_REG(0x2a);//列地址设置
        ST7789_WR_DATA(x1);
        ST7789_WR_DATA(x2);
        ST7789_WR_REG(0x2b);//行地址设置
        ST7789_WR_DATA(y1);
        ST7789_WR_DATA(y2);
        ST7789_WR_REG(0x2c);//储存器写
    }
    else
    {
        ST7789_WR_REG(0x2a);//列地址设置
        ST7789_WR_DATA(x1+80);
        ST7789_WR_DATA(x2+80);
        ST7789_WR_REG(0x2b);//行地址设置
        ST7789_WR_DATA(y1);
        ST7789_WR_DATA(y2);
        ST7789_WR_REG(0x2c);//储存器写
    }
#endif	
}

void ST7789_Init(void)
{
    SPI1_Init();
    ST7789_GPIO_Init();//初始化GPIO

    ST7789_RES_Clr();//复位
    delay_ms(100);
    ST7789_RES_Set();
    delay_ms(100);

    ST7789_BLK_Set();//打开背光
    delay_ms(100);

    //************* Start Initial Sequence **********//
    ST7789_WR_REG(0x11); //Sleep out
    delay_ms(120);              //Delay 120ms
    //************* Start Initial Sequence **********//
    ST7789_WR_REG(0x36);
    if(USE_HORIZONTAL==0)ST7789_WR_DATA8(0x00);
    else if(USE_HORIZONTAL==1)ST7789_WR_DATA8(0xC0);
    else if(USE_HORIZONTAL==2)ST7789_WR_DATA8(0x70);
    else ST7789_WR_DATA8(0xA0);

    ST7789_WR_REG(0x3A);//传输格式定义
    ST7789_WR_DATA8(0x05);//00000101 101代表16bit单像素

    ST7789_WR_REG(0xB2);//前后肩设定
    ST7789_WR_DATA8(0x0C);
    ST7789_WR_DATA8(0x0C);
    ST7789_WR_DATA8(0x00);
    ST7789_WR_DATA8(0x33);
    ST7789_WR_DATA8(0x33);

    ST7789_WR_REG(0xB7);//VGH和VGL
    ST7789_WR_DATA8(0x35);//0X3+0X5 VGH=13.26V VGL=-10.43V 

    ST7789_WR_REG(0xBB);
    ST7789_WR_DATA8(0x19);

    ST7789_WR_REG(0xC0);
    ST7789_WR_DATA8(0x2C);

    ST7789_WR_REG(0xC2);
    ST7789_WR_DATA8(0x01);

    ST7789_WR_REG(0xC3);
    ST7789_WR_DATA8(0x12);

    ST7789_WR_REG(0xC4);
    ST7789_WR_DATA8(0x20);

    ST7789_WR_REG(0xC6);
    ST7789_WR_DATA8(0x09);

    ST7789_WR_REG(0xD0);
    ST7789_WR_DATA8(0xA4);
    ST7789_WR_DATA8(0xA1);

    ST7789_WR_REG(0xE0);
    ST7789_WR_DATA8(0xD0);
    ST7789_WR_DATA8(0x04);
    ST7789_WR_DATA8(0x0D);
    ST7789_WR_DATA8(0x11);
    ST7789_WR_DATA8(0x13);
    ST7789_WR_DATA8(0x2B);
    ST7789_WR_DATA8(0x3F);
    ST7789_WR_DATA8(0x54);
    ST7789_WR_DATA8(0x4C);
    ST7789_WR_DATA8(0x18);
    ST7789_WR_DATA8(0x0D);
    ST7789_WR_DATA8(0x0B);
    ST7789_WR_DATA8(0x1F);
    ST7789_WR_DATA8(0x23);

    ST7789_WR_REG(0xE1);
    ST7789_WR_DATA8(0xD0);
    ST7789_WR_DATA8(0x04);
    ST7789_WR_DATA8(0x0C);
    ST7789_WR_DATA8(0x11);
    ST7789_WR_DATA8(0x13);
    ST7789_WR_DATA8(0x2C);
    ST7789_WR_DATA8(0x3F);
    ST7789_WR_DATA8(0x44);
    ST7789_WR_DATA8(0x51);
    ST7789_WR_DATA8(0x2F);
    ST7789_WR_DATA8(0x1F);
    ST7789_WR_DATA8(0x1F);
    ST7789_WR_DATA8(0x20);
    ST7789_WR_DATA8(0x23);
    ST7789_WR_REG(0x21);

    ST7789_WR_REG(0x29);
}








